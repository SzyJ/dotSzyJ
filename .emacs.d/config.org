#+TITLE: Emacs Configuration File
#+AUTHOR: Szymon Jackiewicz
#+EMAIL: szy.jackiewicz@gmail.com
#+OPTIONS: toc:nil num:nil

* Welcome!
  Anyone is free to copy and use anything contained in this document.
  Last Update:
  Time-stamp: <20-06-2019>
** First of all, who am I?
    Define some base information about myself including location data.
    #+BEGIN_SRC emacs-lisp
    (setq user-full-name "Szymon Jackiewicz"
     user-mail-address "szy.jackiewicz@gmail.com"
     ;; calendar-latitude ???
     ;; calendar-longitude ???
     ;; calendar-location-name "???"
    )
    #+END_SRC
* Theming
** Enable Theming
   Set up the emacs theme directory and choose default theme
   #+BEGIN_SRC emacs-lisp
     (add-to-list 'custom-theme-load-path "~/.emacs.d/themes")
     (load-theme 'molokai t)
   #+END_SRC
** Cursor
   Disable cursor blinking altogether
   #+BEGIN_SRC emacs-lisp
     (blink-cursor-mode nil)
   #+END_SRC
** Custom colour values
** Font
    Change the default theme globally
    #+BEGIN_SRC emacs-lisp
     (set-face-attribute 'default nil :family "Hasklug Nerd Font Complete Mono" :height 110)
    #+END_SRC
** TODO Powerline changes
   Change the default appearance of the powerline
   #+BEGIN_SRC emacs-lisp
   ;; (setq powerline-default-separator 'bar)
   #+END_SRC
* General
lobal Changes
** General settings
*** Use emacs dashboard
    Set up Emacs dashboard
    #+BEGIN_SRC emacs-lisp
     (use-package dashboard
       :ensure t
       :diminish dashboard-mode
       :config
         (setq dashboard-banner-logo-title "your custom text")
         ;; (setq dashboard-startup-banner "~/.emacs.d/dashboard/banner.png")
         (setq dashboard-items '((recents  . 10)
                                 (bookmarks . 10))
           )
         (dashboard-setup-startup-hook)
       )
    #+END_SRC
*** Enable Line Numbers
   Enable line number mode
   #+BEGIN_SRC emacs-lisp
    (use-package linum-relative
      :ensure t
      )
   #+END_SRC

   Configure the line numbers to be relative
   #+BEGIN_SRC emacs-lisp
    (linum-relative-global-mode)
    (setq linum-relative-current-symbol "")
   #+END_SRC
*** Customize window settings
   Disable cursor blinking
   #+BEGIN_SRC emacs-lisp
    (blink-cursor-mode nil)
   #+END_SRC

   Remove unnecesary window features
   #+BEGIN_SRC emacs-lisp
    (tool-bar-mode -1)
    (menu-bar-mode -1)
    (scroll-bar-mode -1)
   #+END_SRC

   Inhibit startup message
   #+BEGIN_SRC emacs-lisp
     (setq inibit-startup-message t)
   #+END_SRC
*** Autosave Settings
    Define autosave area
    #+BEGIN_SRC emacs-lisp
     (setq backup-directory-alist '(("." . "~/.autosave")))
    #+END_SRC
** Emacs Server
   Start up Emacs Srever when emacs opens
   (This is now done in my WM configs)
   #+BEGIN_SRC emacs-lisp
    ;(server-start)
   #+END_SRC
** Use sensible-defaults.el
   Use settings from sensible-defaults
   #+BEGIN_SRC emacs-lisp
    (load-file "~/.emacs.d/sensible-defaults.el")
    (sensible-defaults/use-all-settings)
    (sensible-defaults/use-all-keybindings)
    (setq confirm-kill-emacs nil)
   #+END_SRC
** Enable Sublimity
   Enable Sublimity
   #+BEGIN_SRC emacs-lisp
    (use-package sublimity
      :ensure t
      :init
        (sublimity-mode 1)
    )
   #+END_SRC

   Configure smooth scrolling
   #+BEGIN_SRC emacs-lisp
    (load-file "~/.emacs.d/sublimity/sublimity-scroll.el")
    (setq sublimity-scroll-weight 5
          sublimity-scroll-drift-length 3)
   #+END_SRC
** Bind better search navigation
   Enable swiper for better search navigation
   #+BEGIN_SRC emacs-lisp
    (use-package swiper
      :ensure t
      :init
        (global-set-key (kbd "C-s") 'swiper)
      )
   #+END_SRC

   Bind Avy next char for naviagtion on the screen
   #+BEGIN_SRC emacs-lisp
    (use-package avy
      :ensure t
      )
   #+END_SRC
** Editing
*** Shortcut Remaps
**** TODO General
    Remap undo to C-z
    #+BEGIN_SRC emacs-lisp
     (global-unset-key (kbd "C-z"))
     (global-set-key (kbd "C-z") 'undo)
    #+END_SRC

    Remap yank(paste) to C-v
    #+BEGIN_SRC emacs-lisp
     (global-unset-key (kbd "C-v"))
     (global-set-key (kbd "C-v") 'yank)

     (global-unset-key (kbd "M-v"))
     (global-set-key (kbd "M-v") 'yank-pop)
    #+END_SRC

    Remap IJKL and reuse them for movement
    #+BEGIN_SRC emacs-lisp
     (global-unset-key (kbd "C-i"))
     (global-unset-key (kbd "C-j"))
     (global-unset-key (kbd "C-k"))
    #+END_SRC

    Remap M-s to go to next char instance
    #+BEGIN_SRC emacs-lisp
     (global-set-key (kbd "M-s") 'zap-to-char)
    #+END_SRC
**** Shortcuts
***** Config Shortcut
    #+BEGIN_SRC emacs-lisp
     (defun hrs/visit-emacs-config ()
       (interactive)
       (find-file "~/.emacs.d/config.org")
     )
    (global-set-key (kbd "C-c e")
      'hrs/visit-emacs-config
    )
    #+END_SRC
**** Multiple-Cursors
     Enable multiple-cursors
     #+BEGIN_SRC emacs-lisp
      (use-package multiple-cursors
       	:ensure t
       	)
     #+END_SRC

     When you have an active region that spans multiple lines, the following will add a cursor to each line:
     #+BEGIN_SRC emacs-lisp
      (global-set-key (kbd "C-S-c C-S-c") 'mc/edit-lines)
     #+END_SRC

     When you want to add multiple cursors not based on continuous lines, but based on keywords in the buffer, use:
     #+BEGIN_SRC emacs-lisp
      (global-set-key (kbd "C->") 'mc/mark-next-like-this)
      (global-set-key (kbd "C-<") 'mc/mark-previous-like-this)
      (global-set-key (kbd "C-c C-<") 'mc/mark-all-like-this)
     #+END_SRC
*** Smart-Parens
    Use smartparens to autocomplete backets
    #+BEGIN_SRC emacs-lisp
     (use-package smartparens
       :ensure t
       :init
         (require 'smartparens-config)
       )
     (add-hook 'prog-mode-hook #'smartparens-mode)
    #+END_SRC
*** Tab behaviour
    #+BEGIN_SRC emacs-lisp
     (global-unset-key (kbd "TAB"))
     (global-set-key (kbd "TAB") 'tab-to-tab-stop)
     (setq-default indent-tabs-mode nil)
     (setq-default tab-width 4)
    #+END_SRC
*** Company
    Use company for autocompletion
    #+BEGIN_SRC emacs-lisp
     (use-package company
       :ensure t
       :init
         (add-hook 'after-init-hook 'global-company-mode)
       :config
         (setq company-idle-delay 0)
         (setq company-minimum-prefix-length 2)
       )
    #+END_SRC
** General Navigation
*** Buffer Switching
     #+BEGIN_SRC emacs-lisp
      ;; (setq ido-enable-flex-matching nil)
      (setq ido-create-new-buffer 'always )
      (setq ido-everywhere t)
      (ido-mode 1)
     #+END_SRC

     Enable vertical
     #+BEGIN_SRC emacs-lisp
      (use-package ido-vertical-mode
        :ensure t
        :init
          (ido-vertical-mode 1)
        )

        (setq ido-vertical-define-keys 'C-n-C-p-up-and-down)
     #+END_SRC
*** Command search and execution
     #+BEGIN_SRC emacs-lisp
      (use-package smex
        :ensure t
        :init
          (smex-initialize)
        :bind
          ("M-x" . smex)
        )
     #+END_SRC
** Configure Timestamps
   Configure timestamp properties
   #+BEGIN_SRC emacs-lisp
    (setq time-stamp-active t                 ; do enable time-stamps
	  time-stamp-line-limit 10            ; check first 10 buffer lines for Time-stamp:
	  time-stamp-format "%02d-%02m-%04y"  ; date format
      )
   #+END_SRC

   Let emacs automatically update a timestamp whenever a file is saved
   #+BEGIN_SRC emacs-lisp
    (add-hook 'write-file-hooks 'time-stamp) ; update when saving
   #+END_SRC
* Org Configurations
** Org dates and Times
** Bullet Appearance
   Change the appearance of bullets in Org mode to Kanji numbers
   #+BEGIN_SRC emacs-lisp
    (use-package org-bullets
      :ensure t
      :init
        (add-hook 'org-mode-hook (lambda () (org-bullets-mode t)))
      )

   ;; Kanji Bullets
   (setq org-bullets-bullet-list
     '("〇" "一" "二" "三" "四" "五" "六" "七"))
   #+END_SRC
** Bullet Colour and Size
    Make org headers bold
   #+BEGIN_SRC emacs-lisp
    (set-face-attribute 'org-level-1 nil
                        :weight 'bold)
    (set-face-attribute 'org-level-2 nil
                        :weight 'bold)
    (set-face-attribute 'org-level-3 nil
                        :weight 'bold)
    (set-face-attribute 'org-level-4 nil
                        :weight 'bold)
    (set-face-attribute 'org-level-5 nil
                        :weight 'bold)
    (set-face-attribute 'org-level-6 nil
                        :weight 'bold)
    (set-face-attribute 'org-level-7 nil
                        :weight 'bold)
   #+END_SRC
** Set Various variables
   #+BEGIN_SRC emacs-lisp
    (setq org-ellipsis " ↴ ")
    (setq org-support-shift-select t)
    (setq org-fontify-whole-heading-line t)
    (setq org-src-fontify-natively t)
    (setq org-fontify-emphasized-text nil)
    (global-prettify-symbols-mode t)
   #+END_SRC
* TODO Whitespace Configurations
** TODO Enable global whitespace mode
   Enable whitespace mode WIP
   #+BEGIN_SRC emacs-lisp
   ; (spacemacs/toggle-whitespace-globally-on)
   ;;whitespace-style '(face tabs tab-mark)
   ;;whitespace-display-mappings
   ;; '((newline-mark 10 [172 10])
   ;;   (tab-mark 9 [9655 9])
   ;;  )
   #+END_SRC
** TODO Configure whitespace appearance
   Customise whitespace WIP
   #+BEGIN_SRC test-emacs-lisp
   (custom-set-faces
    '(trailing-whitespace ((t (:foreground "gray30"))))
    '(whitespace-big-indent ((t (:foreground "gray30"))))
    '(whitespace-empty ((t (:foreground "gray30"))))
    '(whitespace-hspace ((t (:foreground "gray30"))))
    '(whitespace-indentation ((t (:foreground "grey30"))))
    '(whitespace-line ((nil nil)))
    '(whitespace-newline ((t (:foreground "gray20"))))
    '(whitespace-space ((t (:foreground "gray30"))))
    '(whitespace-space-after-tab ((t (:foreground "gray30"))))
    '(whitespace-space-before-tab ((t (:foreground "gray30"))))
    '(whitespace-tab ((t (:foreground "gray30"))))
    '(whitespace-line-column ((nil)))
    '(whitespace-trailing ((t (:foreground "gray50" :weight bold))))
   )
   #+END_SRC
* Code
** General
*** Rainbow Delimiters
    Use rainbow delimiters
    #+BEGIN_SRC emacs-lisp
     (use-package rainbow-delimiters
       :ensure t
       :config
         (add-hook 'lisp-mode-hook
           (lambda()
             (rainbow-delimiters-mode)
           )
         )
       )
     (add-hook 'prog-mode-hook (lambda()
             (rainbow-delimiters-mode)
           ))
    #+END_SRC
*** Auto-Complete
     Use company for autocompletion
     #+BEGIN_SRC emacs-lisp
      (use-package company
        :ensure t
        :bind
          (("M-RET" . company-complete))
        :config
          (setq company-idle-delay 0)
          (setq company-minimum-prefix-length 2)
        )
     #+END_SRC

     Configure company irony
     #+BEGIN_SRC emacs-lisp
      (use-package company-irony
        :ensure t
        :config
          (require 'company)
          (add-to-list 'company-backends 'company-irony)
        )
     #+END_SRC

     Setup company language hooks
     Needed prerequisites:
        - clang
     #+BEGIN_SRC emacs-lisp
      (use-package irony
        :ensure t
        :config
          (add-hook 'c++-mode-hook 'irony-mode)
          (add-hook 'c-mode-hook 'irony-mode)
          (add-hook 'irony-mode 'irony-cdb-autosetup-compile-mode-options)
        )

      (with-eval-after-load 'company
        (add-hook 'c++-mode 'company-mode)
        (add-hook 'c-mode 'company-mode)
        )
     #+END_SRC
*** Selection
    Use mark multiple
    #+BEGIN_SRC emacs-lisp
     (use-package mark-multiple
       :ensure t
       :bind ("C-c q" . 'mark-next-like-this)
       )
    #+END_SRC

    Expand Selection
    #+BEGIN_SRC emacs-lisp
     (use-package expand-region
       :ensure t
       :bind ("C-q" . er/expand-region)
       )
    #+END_SRC
*** Global Syntax hilighting
    #+BEGIN_SRC emacs-lisp
     (use-package flycheck
       :ensure t
       :init (global-flycheck-mode))
    #+END_SRC

** Markdown
   Use markdown mode
   #+BEGIN_SRC emacs-lisp
    (use-package markdown-mode
      :ensure t
      )
   #+END_SRC
*** LaTeX
    Use AUCTeX
    #+BEGIN_SRC emacs-lisp
     (use-package tex-site
       :ensure auctex
       :mode ("\\.tex\\'" . latex-mode)
       :config
         (setq TeX-auto-save t)
         (setq TeX-parse-self t)
         (setq-default TeX-master nil)
         (add-hook 'LaTeX-mode-hook
                   (lambda ()
                     (rainbow-delimiters-mode)
                     (company-mode)
                     (smartparens-mode)
                     (turn-on-reftex)
                     (setq reftex-plug-into-AUCTeX t)
                     (reftex-isearch-minor-mode)
                     (setq TeX-PDF-mode t)
                     (setq TeX-source-correlate-method 'synctex)
                     (setq TeX-source-correlate-start-server t))
            )

     ;; Update PDF buffers after successful LaTeX runs
     (add-hook 'TeX-after-TeX-LaTeX-command-finished-hook
                #'TeX-revert-document-buffer)

     ;; to use pdfview with auctex
     (add-hook 'LaTeX-mode-hook 'pdf-tools-install)

     ;; to use pdfview with auctex
     (setq TeX-view-program-selection '((output-pdf "pdf-tools"))
            TeX-source-correlate-start-server t)
     (setq TeX-view-program-list '(("pdf-tools" "TeX-pdf-tools-sync-view"))))
    #+END_SRC

    Use RefTeX
    #+BEGIN_SRC emacs-lisp
     (use-package reftex
       :ensure t
       :defer t
       :config
         (setq reftex-cite-prompt-optional-args t); Prompt for empty optional arguments in cite
       )
    #+END_SRC

    use PDF-Tools
    #+BEGIN_SRC emacs-lisp
     (use-package pdf-tools
       :ensure t
       :mode ("\\.pdf\\'" . pdf-tools-install)
       :bind ("C-c C-g" . pdf-sync-forward-search)
       :defer t
       :config
         (setq mouse-wheel-follow-mouse t)
         (setq pdf-view-resize-factor 1.10)
       )
    #+END_SRC

    Setup emacs to work with Okular
    #+BEGIN_SRC emacs-lisp
     (setq TeX-view-program-list '(("Okular" "okular --unique %u")))

     (add-hook 'LaTeX-mode-hook '(
       lambda ()
         (add-to-list 'TeX-expand-list
                      '("%u" Okular-make-url)
           )
         )
       )

     (defun Okular-make-url ()
       (concat "file://"
           (expand-file-name (funcall file (TeX-output-extension) t)
                             (file-name-directory (TeX-master-file))
             )
           "#src:"
           (TeX-current-line)
           (expand-file-name (TeX-master-directory))
           "./"
           (TeX-current-file-name-master-relative)
         )
       )

     (setq TeX-view-program-selection '((output-pdf "Okular")))
    #+END_SRC

    Use BibTeX to insert citations
    #+BEGIN_SRC emacs-lisp
;;     (use-package ivy-bibtex
;;       :ensure t
;;       :bind ("C-c b b" . ivy-bibtex)
;;       :config
;;         (setq bibtex-completion-bibliography
;;               '("C:/~/Documents/LaTeX/Bibliography/references-zot.bib"))
;;         (setq bibtex-completion-library-path
;;               '("C:/~/Documents/LaTeX/Bibliography/references-pdf"
;;                 "C:/~/Documents/LaTeX/Bibliography/references-etc"))
;;
;;         ;; using bibtex path reference to pdf file
;;         (setq bibtex-completion-pdf-field "File")
;;
;;         ;;open pdf with external viwer foxit
;;         (setq bibtex-completion-pdf-open-function
;;               (lambda (fpath)
;;                 (call-process "C:\\Program Files (x86)\\Foxit Software\\Foxit Reader\\FoxitReader.exe" nil 0 nil fpath)))
;;
;;         (setq ivy-bibtex-default-action 'bibtex-completion-insert-citation)
;;      )
    #+END_SRC

    Use Magic LaTeX buffer
    #+BEGIN_SRC emacs-lisp
     (use-package magic-latex-buffer
       :ensure t
       :config
         (add-hook 'latex-mode-hook 'magic-latex-buffer)
       )
    #+END_SRC

    Use visual line mode
    #+BEGIN_SRC emacs-lisp
     (add-hook 'latex-mode-hook (lambda()
       (visual-line-mode -l))
       )
    #+END_SRC
** Web
*** HTML
     #+BEGIN_SRC emacs-lisp
      (use-package emmet-mode
        :ensure t
        )
     #+END_SRC
*** CSS
    #+BEGIN_SRC emacs-lisp
     (use-package rainbow-mode
       :ensure t
       :init
         (add-hook 'prog-mode-hook 'rainbow-mode)
       )
    #+END_SRC
*** JavaScript
**** JSX support
      #+BEGIN_SRC emacs-lisp
      (use-package rjsx-mode
       	:ensure t
       	)
      #+END_SRC
**** Typescript
      #+BEGIN_SRC emacs-lisp
      (use-package typescript-mode
        :ensure t
        )
      #+END_SRC
**** Tern
      Enable tern
      #+BEGIN_SRC emacs-lisp
       (add-to-list 'load-path "~/.emacs.d/tern/emacs/")
       (autoload 'tern-mode "tern.el" nil t)
      #+END_SRC

      Automatically enable tern in js mode
      #+BEGIN_SRC emacs-lisp
       (add-hook 'js-mode-hook (lambda () (tern-mode t)))
      #+END_SRC
*** Frameworks
**** Angular
      #+BEGIN_SRC emacs-lisp
      (use-package ng2-mode
        :ensure t
        )
      #+END_SRC
** C and C++
*** Header Comment
    #+BEGIN_SRC emacs-lisp
    ; (use-package
    #+END_SRC
** Go
    Use Go mode
    #+BEGIN_SRC emacs-lisp
     (use-package go-mode
        :ensure t
        )
    #+END_SRC

    Enable go with company and override spaces
    #+BEGIN_SRC emacs-lisp
     (use-package company-go
        :ensure t
        :init
        (add-hook 'go-mode-hook (lambda ()
                          (set (make-local-variable 'company-backends) '(company-go))
                          (company-mode)
                          (add-hook 'before-save-hook 'gofmt-before-save)
                          (setq tab-width 4)
                          (setq indent-tabs-mode nil)))
        )
    #+END_SRC
